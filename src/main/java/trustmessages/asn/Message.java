/**
 * This class file was automatically generated by jASN1 v1.7.0 (http://www.openmuc.org)
 */

package trustmessages.asn;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerTag;

import java.io.IOException;
import java.io.InputStream;


public class Message {

    public byte[] code = null;
    public DataRequest dataRequest = null;
    public DataResponse dataResponse = null;
    public FormatRequest formatRequest = null;
    public FormatResponse formatResponse = null;
    public Fault fault = null;

    public Message() {
    }

    public Message(byte[] code) {
        this.code = code;
    }

    public Message(DataRequest dataRequest, DataResponse dataResponse, FormatRequest formatRequest, FormatResponse formatResponse, Fault fault) {
        this.dataRequest = dataRequest;
        this.dataResponse = dataResponse;
        this.formatRequest = formatRequest;
        this.formatResponse = formatResponse;
        this.fault = fault;
    }

    public int encode(BerByteArrayOutputStream os) throws IOException {

        if (code != null) {
            for (int i = code.length - 1; i >= 0; i--) {
                os.write(code[i]);
            }
            return code.length;
        }

        int codeLength = 0;
        if (fault != null) {
            codeLength += fault.encode(os, true);
            return codeLength;
        }

        if (formatResponse != null) {
            codeLength += formatResponse.encode(os, true);
            return codeLength;
        }

        if (formatRequest != null) {
            codeLength += formatRequest.encode(os, true);
            return codeLength;
        }

        if (dataResponse != null) {
            codeLength += dataResponse.encode(os, true);
            return codeLength;
        }

        if (dataRequest != null) {
            codeLength += dataRequest.encode(os, true);
            return codeLength;
        }

        throw new IOException("Error encoding BerChoice: No item in choice was selected.");
    }

    public int decode(InputStream is) throws IOException {
        return decode(is, null);
    }

    public int decode(InputStream is, BerTag berTag) throws IOException {

        int codeLength = 0;
        BerTag passedTag = berTag;

        if (berTag == null) {
            berTag = new BerTag();
            codeLength += berTag.decode(is);
        }

        if (berTag.equals(DataRequest.tag)) {
            dataRequest = new DataRequest();
            codeLength += dataRequest.decode(is, false);
            return codeLength;
        }

        if (berTag.equals(DataResponse.tag)) {
            dataResponse = new DataResponse();
            codeLength += dataResponse.decode(is, false);
            return codeLength;
        }

        if (berTag.equals(FormatRequest.tag)) {
            formatRequest = new FormatRequest();
            codeLength += formatRequest.decode(is, false);
            return codeLength;
        }

        if (berTag.equals(FormatResponse.tag)) {
            formatResponse = new FormatResponse();
            codeLength += formatResponse.decode(is, false);
            return codeLength;
        }

        if (berTag.equals(Fault.tag)) {
            fault = new Fault();
            codeLength += fault.decode(is, false);
            return codeLength;
        }

        if (passedTag != null) {
            return 0;
        }

        throw new IOException("Error decoding BerChoice: Tag matched to no item.");
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
        encode(os);
        code = os.getArray();
    }

    public String toString() {
        if (dataRequest != null) {
            return "CHOICE{dataRequest: " + dataRequest + "}";
        }

        if (dataResponse != null) {
            return "CHOICE{dataResponse: " + dataResponse + "}";
        }

        if (formatRequest != null) {
            return "CHOICE{formatRequest: " + formatRequest + "}";
        }

        if (formatResponse != null) {
            return "CHOICE{formatResponse: " + formatResponse + "}";
        }

        if (fault != null) {
            return "CHOICE{fault: " + fault + "}";
        }

        return "unknown";
    }

}

