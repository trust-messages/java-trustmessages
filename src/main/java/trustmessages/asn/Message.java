/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package trustmessages.asn;

import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.BerTag;
import org.openmuc.jasn1.ber.ReverseByteArrayOutputStream;
import org.openmuc.jasn1.ber.types.BerInteger;
import org.openmuc.jasn1.ber.types.BerType;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;


public class Message implements BerType, Serializable {

    public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
    private static final long serialVersionUID = 1L;
    public byte[] code = null;
    public BerInteger version = null;
    public Payload payload = null;
    public Message() {
    }

    public Message(byte[] code) {
        this.code = code;
    }

    public Message(BerInteger version, Payload payload) {
        this.version = version;
        this.payload = payload;
    }

    public int encode(OutputStream reverseOS) throws IOException {
        return encode(reverseOS, true);
    }

    public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

        if (code != null) {
            for (int i = code.length - 1; i >= 0; i--) {
                reverseOS.write(code[i]);
            }
            if (withTag) {
                return tag.encode(reverseOS) + code.length;
            }
            return code.length;
        }

        int codeLength = 0;
        codeLength += payload.encode(reverseOS);

        codeLength += version.encode(reverseOS, true);

        codeLength += BerLength.encodeLength(reverseOS, codeLength);

        if (withTag) {
            codeLength += tag.encode(reverseOS);
        }

        return codeLength;

    }

    public int decode(InputStream is) throws IOException {
        return decode(is, true);
    }

    public int decode(InputStream is, boolean withTag) throws IOException {
        int codeLength = 0;
        int subCodeLength = 0;
        BerTag berTag = new BerTag();

        if (withTag) {
            codeLength += tag.decodeAndCheck(is);
        }

        BerLength length = new BerLength();
        codeLength += length.decode(is);

        int totalLength = length.val;
        codeLength += totalLength;

        subCodeLength += berTag.decode(is);
        if (berTag.equals(BerInteger.tag)) {
            version = new BerInteger();
            subCodeLength += version.decode(is, false);
            subCodeLength += berTag.decode(is);
        } else {
            throw new IOException("Tag does not match the mandatory sequence element tag.");
        }

        payload = new Payload();
        subCodeLength += payload.decode(is, berTag);
        if (subCodeLength == totalLength) {
            return codeLength;
        }
        throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);


    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
        encode(reverseOS, false);
        code = reverseOS.getArray();
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        appendAsString(sb, 0);
        return sb.toString();
    }

    public void appendAsString(StringBuilder sb, int indentLevel) {

        sb.append("{");
        sb.append("\n");
        for (int i = 0; i < indentLevel + 1; i++) {
            sb.append("\t");
        }
        if (version != null) {
            sb.append("version: ").append(version);
        } else {
            sb.append("version: <empty-required-field>");
        }

        sb.append(",\n");
        for (int i = 0; i < indentLevel + 1; i++) {
            sb.append("\t");
        }
        if (payload != null) {
            sb.append("payload: ");
            payload.appendAsString(sb, indentLevel + 1);
        } else {
            sb.append("payload: <empty-required-field>");
        }

        sb.append("\n");
        for (int i = 0; i < indentLevel; i++) {
            sb.append("\t");
        }
        sb.append("}");
    }

    public static class Payload implements BerType, Serializable {

        private static final long serialVersionUID = 1L;

        public byte[] code = null;
        public DataRequest dataRequest = null;
        public DataResponse dataResponse = null;
        public FormatRequest formatRequest = null;
        public FormatResponse formatResponse = null;
        public Fault fault = null;

        public Payload() {
        }

        public Payload(byte[] code) {
            this.code = code;
        }

        public Payload(DataRequest dataRequest, DataResponse dataResponse, FormatRequest formatRequest, FormatResponse formatResponse, Fault fault) {
            this.dataRequest = dataRequest;
            this.dataResponse = dataResponse;
            this.formatRequest = formatRequest;
            this.formatResponse = formatResponse;
            this.fault = fault;
        }

        public int encode(OutputStream reverseOS) throws IOException {

            if (code != null) {
                for (int i = code.length - 1; i >= 0; i--) {
                    reverseOS.write(code[i]);
                }
                return code.length;
            }

            int codeLength = 0;
            if (fault != null) {
                codeLength += fault.encode(reverseOS, true);
                return codeLength;
            }

            if (formatResponse != null) {
                codeLength += formatResponse.encode(reverseOS, true);
                return codeLength;
            }

            if (formatRequest != null) {
                codeLength += formatRequest.encode(reverseOS, true);
                return codeLength;
            }

            if (dataResponse != null) {
                codeLength += dataResponse.encode(reverseOS, true);
                return codeLength;
            }

            if (dataRequest != null) {
                codeLength += dataRequest.encode(reverseOS, true);
                return codeLength;
            }

            throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
        }

        public int decode(InputStream is) throws IOException {
            return decode(is, null);
        }

        public int decode(InputStream is, BerTag berTag) throws IOException {

            int codeLength = 0;
            BerTag passedTag = berTag;

            if (berTag == null) {
                berTag = new BerTag();
                codeLength += berTag.decode(is);
            }

            if (berTag.equals(DataRequest.tag)) {
                dataRequest = new DataRequest();
                codeLength += dataRequest.decode(is, false);
                return codeLength;
            }

            if (berTag.equals(DataResponse.tag)) {
                dataResponse = new DataResponse();
                codeLength += dataResponse.decode(is, false);
                return codeLength;
            }

            if (berTag.equals(FormatRequest.tag)) {
                formatRequest = new FormatRequest();
                codeLength += formatRequest.decode(is, false);
                return codeLength;
            }

            if (berTag.equals(FormatResponse.tag)) {
                formatResponse = new FormatResponse();
                codeLength += formatResponse.decode(is, false);
                return codeLength;
            }

            if (berTag.equals(Fault.tag)) {
                fault = new Fault();
                codeLength += fault.decode(is, false);
                return codeLength;
            }

            if (passedTag != null) {
                return 0;
            }

            throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
        }

        public void encodeAndSave(int encodingSizeGuess) throws IOException {
            ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
            encode(reverseOS);
            code = reverseOS.getArray();
        }

        public String toString() {
            StringBuilder sb = new StringBuilder();
            appendAsString(sb, 0);
            return sb.toString();
        }

        public void appendAsString(StringBuilder sb, int indentLevel) {

            if (dataRequest != null) {
                sb.append("dataRequest: ");
                dataRequest.appendAsString(sb, indentLevel + 1);
                return;
            }

            if (dataResponse != null) {
                sb.append("dataResponse: ");
                dataResponse.appendAsString(sb, indentLevel + 1);
                return;
            }

            if (formatRequest != null) {
                sb.append("formatRequest: ").append(formatRequest);
                return;
            }

            if (formatResponse != null) {
                sb.append("formatResponse: ");
                formatResponse.appendAsString(sb, indentLevel + 1);
                return;
            }

            if (fault != null) {
                sb.append("fault: ");
                fault.appendAsString(sb, indentLevel + 1);
                return;
            }

            sb.append("<none>");
        }

    }

}

